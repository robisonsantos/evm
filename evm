#!/usr/bin/env bash
# evm5_0.sh
#
# Read the page http://www.erlang.org and catch
# all available erlang versions to download, including minor releases
#
# set -ex

set -o errexit # Used to exit upon error, avoiding cascading errors

if [[ -z "${SHELL}" ]]; then
  EVM_PS_SHELL="$(ps | grep $$)"
else
  EVM_PS_SHELL="$SHELL"
fi

VERSION="5.0.3"
ERLANG_ORG="http://www.erlang.org/download/"
ERLANG_URL="https://github.com"
FILE_PATH="/erlang/otp/archive/OTP-"
FILE_EXTENSION=".zip"
FILE_PREFIX="OTP-"
FOLDER_PREFIX="otp_src_"
EVM_HOME=$HOME"/.evm"
DEFAULT_TAR_LOCATION=$EVM_HOME"/erlang_tars/"
DEFAULT_INSTALL_LOCATION=$EVM_HOME"/erlang_versions/"

# Removes 'OTP_' from the parameter
function strip_version() {
  sed 's/OTP_//' <<< $1
}

function _list_available_erl_versions() {
  # get the download.html page in a txt format
  # filter those with opt-.*readme on it, the grap only the version
  # remove spaces
  # NOTE: this logic exclude old version of erlang that used to start with R*, which means
  # that version before 17 won't be displayed. This should be ok as those versions are already
  # too old
  # This also removes the 'grep' dependency, which becomes a problem on Mac
  wget -q -O - "$ERLANG_ORG" \
   | tr '[:upper:]' '[:lower:]' \
   | sed '/^.*href="otp-\(.*\).readme".*/!d' \
   | sed -e 's/^.*href="otp-\(.*\).readme".*/\1/g' \
   | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//;s/ /_/' \
   | sort \
   | uniq
}

# TODO: add here some way to discover what's the
#       default version and what's been set to be used and the ones already downloaded
# For now just load the default version
function _load() {
  if [[ -f "$EVM_HOME/evm_config/erlang_default" ]]
  then
    default="$(cat "$EVM_HOME/evm_config/erlang_default")"
    local VER="$(strip_version $default)"
    export PATH="$DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER/bin:$PATH"
  fi
}

# This function is responsible for listing all
# available erlang versions from erlang.org page
# @params: none
function evm_list() {
  local ERLANGS="$(_list_available_erl_versions)"

  [ -z "$ERLANGS" ] && echo "Failed to fetch available Erlang versions" && return 1

  echo Available Erlang versions on $ERLANG_URL
  echo

  for erlang in $(echo "$ERLANGS"); do
    echo "$erlang" | cut -d ' ' -f 1
  done
  echo
}


# This function will receive the version name to be
# downloaded. If the version exists in the erlang.org
# it will be stored at $EVM_HOME/erlang_tars. If not, a message is printed
# to user
# @params: erlang_version
function evm_download() {
  local ERLANGS="$(_list_available_erl_versions)"
  [ -z "$ERLANGS" ] && echo "Failed to fetch available Erlang versions" && return 1

  if [[ -z $(echo "$ERLANGS" | grep -E "$1") ]]
  then
    echo "$1 - This version is not available at $ERLANG_ORG"
    return 1
  else
    if [[ -f "$DEFAULT_TAR_LOCATION$FILE_PREFIX$1$FILE_EXTENSION" ]]
    then
      echo "$1 - is already present at $DEFAULT_TAR_LOCATION"
      return 1
    else
      mkdir -p $DEFAULT_TAR_LOCATION
      local VER="$(strip_version $1)"
      wget -P $DEFAULT_TAR_LOCATION $ERLANG_URL$FILE_PATH$VER$FILE_EXTENSION
    fi
  fi
  echo
}


# This function will remove alter the PATH variable, leaving only
# the system version of ERLANG available.
# @params: none
function evm_system() {
  ## Remove any old entries for erlangs managed by evm
  ## from the path variable and add the default one
  ## Here I use sed "s,<pattern>,<replacement>"
  ## To remove any reference of erlang, duplicated ::,
  ## : from the beginning and from the end of path
  for d in $DEFAULT_INSTALL_LOCATION*
  do
    PATH="$(echo $PATH | sed -e "s,$d/bin,,g ; s,^:,, ; s,::,:,g ; s,:$,,")"
  done
  export PATH
}

function _unzip_strip() {
  # shopt is a bash built-in command. Zsh, has setopt instead
  # so, set the command according to the type of shell (only supports bash and zsh)
  local SHOPT="shopt"
  if [[ "$EVM_PS_SHELL" == *zsh ]] || [[  "$(which $SHELL)" == *"/zsh" ]] ; then
    SHOPT="setopt"
  fi

  local zip="$1"
  local dest="${2:-.}"
  local -i _err=0
  local temp=$(mktemp -d)
  _err=$?
  if [ ${_err} -ne 0 ] ; then
    return ${_err}
  fi
  unzip -d "$temp" "$zip"
  _err=$?
  if [ ${_err} -ne 0 ] ; then
    return ${_err}
  fi
  mkdir -p "$dest"
  _err=$?
  if [ ${_err} -ne 0 ] ; then
    return ${_err}
  fi
  $SHOPT -s dotglob
  _err=$?
  if [ ${_err} -ne 0 ] ; then
    return ${_err}
  fi
  local f=("$temp"/*)
  _err=$?
  if [ ${_err} -ne 0 ] ; then
    return ${_err}
  fi

    if (( ${#f[@]} == 1 )) && [[ -d "${f[0]}" ]] ; then
      mv "$temp"/*/* "$dest"
      _err=$?
      if [ ${_err} -ne 0 ] ; then
        return ${_err}
      fi

    else
      mv "$temp"/* "$dest"
      _err=$?
      if [ ${_err} -ne 0 ] ; then
        return ${_err}
      fi
    fi
    rm -rf "$temp"
    _err=$?
    if [ ${_err} -ne 0 ] ; then
      return ${_err}
    fi
} # end _unzip_strip


# This function will download the erlang version if needed,
# then is will "install" that version in the evm space.
# @params: erlang_version
#          continue_install
#          build_docs
#          expand_bin
#          config_extras
function evm_install() {
  local VER="$(strip_version $1)"
  local DONT_ASK="$2"
  local BUILD_DOCS="$3"
  local EXPAND_BIN="$4"
  local EXTRA=${@:5}

  # Download version only if it does not existed cached
  if [[ -f "$DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION" ]]
  then
    echo "$1 is already cached, don't need to download it"
  else
    local ERLANGS="$(_list_available_erl_versions)"
    [ -z "$ERLANGS" ] && echo "Failed to fetch available Erlang versions" && return 1

    if [[ -z $(echo "$ERLANGS" | grep "$1") ]]
    then
      echo "$1 - This version is not available at $ERLANG_ORG"
      return 1
    else
      mkdir -p $DEFAULT_TAR_LOCATION
      wget -P $DEFAULT_TAR_LOCATION $ERLANG_URL$FILE_PATH$VER$FILE_EXTENSION
    fi
  fi

  # Install the version if not installed yet
  if [[ -d "$DEFAULT_INSTALL_LOCATION/$FOLDER_PREFIX$VER" ]]
  then
    echo "$1 - This version is already installed at $DEFAULT_INSTALL_LOCATION"
    echo "Try 'evm uninstall $1' and then 'evm install $1' again"
  else
    mkdir -p $DEFAULT_INSTALL_LOCATION
    echo "Inflating $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION"

    # Handles the special case where otp_src_R15B03-1.tar.gz gets untarred into otp_src_R15B03
    # tar xvzf ~/.evm/erlang_tars/otp_src_R15B03-1.tar.gz --strip-components 1 -C otp_src_R15B03-1
    local UNTAR_DIR=$DEFAULT_TAR_LOCATION$FOLDER_PREFIX$VER
    mkdir $UNTAR_DIR
    # PARENT_COMMAND=$(ps -o comm= $PPID)
    # >&2  echo PWD:$(PWD) PARENT_COMMAND:${PARENT_COMMAND} > $HOME/evm.log
    local -i _err=0
    _unzip_strip $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION $UNTAR_DIR
    _err=$?
    if [ ${_err} -ne 0 ] ; then
      echo "There was an error unzipping ... $UNTAR_DIR"
      exit 1
    fi
    echo "Configuring... $UNTAR_DIR"
    _err=0

    # In zshell or other systems, the contents of the zip file
    # are expanded inside a new directory in the destination,
    # so we need to check whether there's one single entry in the destination
    # or multiple and cd into the right place
    if [ $(ls -1 $UNTAR_DIR | wc -l) -gt 1 ]; then
      cd $UNTAR_DIR
      _err=$?
    else
      cd $UNTAR_DIR/* # CD into the new subdirectory
      _err=$?
    fi
    if [ ${_err} -ne 0 ] ; then
      echo "There was an error going to directory unzipped ... $UNTAR_DIR"
      exit 1
    fi

    local INSTALL_DIR="$DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER"
    # Sanitize extra parameters. Extra spaces break configure
    # Multiple spaces becomes one space and spaces from begining of string are removed.
    EXTRA="$(echo "$EXTRA" | sed -E 's/[[:blank:]]+/ /g;s/^[[:blank:]]+//g')"
    chmod +X otp_build
    _err=$?
    if [ ${_err} -ne 0 ] ; then
      echo "There was an error calling ... .chmod +X otp_build "
      exit 1
    fi
    ./otp_build autoconf # To generate the configure file
    _err=$?
    if [ ${_err} -ne 0 ] ; then
      echo "There was an error calling ... ./otp_build autoconf "
      exit 1
    fi
    ./configure --prefix="$INSTALL_DIR" $EXTRA
    _err=$?
    if [ ${_err} -ne 0 ] ; then
      echo "There was an error calling ... ./configure --prefix="$INSTALL_DIR" $EXTRA"
      exit 1
    fi
    # Block execution so the user can check if any dependency is missing
    # before continue with installation unless '-y' is passed along
    # with evm install command
    if [[ "$DONT_ASK" != "Y" && "$DONT_ASK" != "y" ]]; then
      echo
      echo "Continue with installation?(y/n)"
      read cont
    else
      cont="y"
    fi

    if [[ "$cont" != "Y" && "$cont" != "y" ]]
    then
      echo "Cancelling installation of $1"
      cd ..
      rm -rf $DEFAULT_TAR_LOCATION$FOLDER_PREFIX$VER
      return 0
    fi

    echo "Compiling and installing $1"
    export MAKEFLAGS=-j8
    make && make install 1> "/tmp/erlang_$VER_installation" 2>&1

    if [[ "$BUILD_DOCS" == "Y" || "$BUILD_DOCS" == "y" ]]
    then
      make docs && make install-docs 1> "/tmp/erlang_$VER_installation" 2>&1
    fi

    rm -rf $DEFAULT_TAR_LOCATION$FOLDER_PREFIX$VER
    cd -

    if [[ "$EXPAND_BIN" == "Y" || "$EXPAND_BIN" == "y" ]]
    then
      echo "Add links to path..."

      # Go into lib dir to find bin folders. Anything inside bin folders go
      # into the path
      cd "$INSTALL_DIR/lib"

      # Escape "erlang/bin" and "erlang/erts" because that's already in the right place
      for d in $(find . -type d -name "bin" | grep -v "erlang/bin" | grep -v "erlang/erts"); do
        (
        cd $d
        for f in *; do
          echo "Adding $d/$f to $INSTALL_DIR/bin..."
          ln -s "$INSTALL_DIR/lib/$d/$f" "$INSTALL_DIR/bin"
        done
        )
      done

      cd -
    fi

    echo "Done!"
    echo "Use 'evm default $1' to set this version as default or 'evm use $1' to start using this version right now"
  fi
}

# This function will remove the erlang version from the evm space
# @params: erlang_version
function evm_remove() {
  local VER="$(strip_version $1)"
  if [[ -d $DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER ]]
  then
    echo "Uninstalling $1..."
    rm -rf $DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER
    echo "Uninstalled"
  else
    echo "$1 not installed"
  fi

  if [[ -f $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION ]]
  then
    echo "Removing $1..."
    rm -rf $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION
    echo "Removed"
  else
    echo "$1 not downloaded"
  fi
}

# This function will actually uninstall the erlang version from
# system, but will leave the erlang tar in the evm space
# @params: erlang_version
function evm_uninstall() {
  local VER="$(strip_version $1)"
  if [[ -d $DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER ]]
  then
    echo "Uninstalling $1..."
    rm -rf $DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER
    echo "Uninstalled"
  else
    echo "$1 not installed"
    return 1
  fi
}

# This function will set this erlang version to be the one
# available in the PATH
# @params: erlang_version
function evm_use() {
  local VER="$(strip_version $1)"
  if [[ -d $DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER ]]
  then
    ## Remove any old entries for erlangs managed by evm
    ## from the path variable and add the default one
    ## Here I use sed "s,<pattern>,<replacement>"
    ## To remove any reference of erlang, duplicated ::,
    ## : from the beginning and from the end of path
    for d in $DEFAULT_INSTALL_LOCATION*
    do
      PATH="$(echo $PATH | sed -e "s,$d/bin,,g ; s,^:,, ; s,::,:,g ; s,:$,,")"
    done
    export PATH=$DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER/bin:$PATH
  else
    echo "$1 - Version $VER not installed in $DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER. Use 'evm install $1' to install it"
    return 1
  fi
}

# This function will set this erlang version as system default.
# @params: erlang_version
function evm_default() {
  local VER="$(strip_version $1)"
  if [[ -d $DEFAULT_INSTALL_LOCATION$FOLDER_PREFIX$VER ]]
  then
    echo $1 >| $EVM_HOME/evm_config/erlang_default
    evm_use $1
  else
    echo "$1 is not installed yet. Use 'evm install $1' to install it"
    return 1
  fi
}

# This function will show a list of all installed version of
# in the evm space
# TODO: the version listed here should map the version in evm list
function evm_installed() {
  ## Colors
  local LIGHT_GREEN="\e[1;32m"
  local LIGHT_CYAN="\e[1;36m"
  local DARK_YELLOW="\e[1;33m"
  local NO_COLOR="\e[0m"
  local COLOR_SUPPORT="FALSE"

  # See if terminal supports colors...
  local tcolors=$(tput colors)

  # Just set a flag in case color is support by this shell
  if test -n "$tcolors" && test $tcolors -ge 8 ; then
    COLOR_SUPPORT="TRUE"
  fi

  echo "Installed Erlang versions on this system"
  echo

  # Get the default version
  local default_version="$(cat $EVM_HOME/evm_config/erlang_default)"
  default_version="$(strip_version $default_version)"

  local system="$(uname -s)"

  # Get the current versin in use from PATH
  if [[ "$system" == "Darwin" ]]; then
    local version_in_use="$(echo $PATH | egrep -o "$DEFAULT_INSTALL_LOCATION.*?/bin" | egrep -o "$FILE_PREFIX.*?/" | tr -d '/' | sed "s/$FILE_PREFIX//" | head -1)"
  else
    local version_in_use="$(echo $PATH | grep -Po "$DEFAULT_INSTALL_LOCATION.*?/bin" | grep -Po "$FILE_PREFIX.*?/" | tr -d '/' | sed "s/$FILE_PREFIX//" | head -1)"
  fi

  ## TODO: think of a way to sort versions better
  ## Unalias 'ls' to avoid it adding 'colors' to the output
  ## Do that inside a subshell to not alter the user settings
  (
  unalias ls >> /dev/null 2>&1
  for f in $(ls $DEFAULT_INSTALL_LOCATION | sort | perl -e 'print reverse <>' | sed 's/otp_src_//g')
  do
    local ver="${f#$FILE_PREFIX}"

      # Apply symbols and colors
      if [[ "$ver" == "$default_version" && "$ver" == "$version_in_use" ]]; then
        ver="=* $ver"

        # Show default and current as 'green'
        if [[ "$COLOR_SUPPORT" == "TRUE" ]]; then
          ver="${LIGHT_GREEN}$ver${NO_COLOR}"
        fi

      elif [[ "$ver" == "$default_version" ]]; then
        ver="* $ver"

        # Show default (but not current) as 'yellow'
        if [[ "$COLOR_SUPPORT" == "TRUE" ]]; then
          ver="${DARK_YELLOW}$ver${NO_COLOR}"
        fi

      elif [[ "$ver" == "$version_in_use" ]]; then
        ver="=> $ver"

        # Show current (but not default) as cyan
        if [[ "$COLOR_SUPPORT" == "TRUE" ]]; then
          ver="${LIGHT_GREEN}$ver${NO_COLOR}"
        fi

      fi

      echo -e "$ver"
    done
    )
    echo
    echo "------"
    echo "=* : current and default"
    echo "=> : current"
    echo " * : default"

    echo
  }

# This function will show all erlang version cached on evm space
function evm_cache() {
  echo "Erlang version in cache:"
  echo

  ## Unalias 'ls' to avoid it adding 'colors' to the output
  ## Do that inside a subshell to not alter the user settings
  (
  unalias ls >> /dev/null 2>&1
  for f in $(ls $DEFAULT_TAR_LOCATION | grep -v $FOLDER_PREFIX)
  do
    ff=${f#$FILE_PREFIX}
    echo ${ff%$FILE_EXTENSION}
  done
  )
  echo
}

function evm_help() {

  local default_version="$(cat $EVM_HOME/evm_config/erlang_default)"

  local available_versions="$(ls -l ${DEFAULT_INSTALL_LOCATION} \
    | grep '^d' \
    | awk '{print $NF}' \
    | cut -d '_' -f 3 \
    | sed 's/^R/\tR/g' \
    | sort \
    | perl -e 'print reverse <>')"

  local HELP_FILE=$EVM_HOME"/.evm_helptext"
  cat > $HELP_FILE <<_EOF

    EVM Home:
        ${EVM_HOME}
    Default Version:
        ${default_version:-"None"}
    Versions Ready To Use:
        ${available_versions:-"None"}

    Usage:
        * evm list
            Lists the available erlang versions which can be downloaded and
      installed.
        * evm cache
            Lists all the erlang versions in the evm space but not necessarily
      installed.
        * evm download [version]
            Downloads the erlang version.
        * evm install [version] [-y] [--with-docs] [--expand-bin] [erlang config options]
            Downloads and installs the specified erlang version.
            Use -y when you want to skip confirmation after the ./configure step.
      -y will perform the installation even if dependencies are not met.
    Do not use -y if you want to stop and check the dependencies.
      You can use --with-docs to build and install documentation for
      erlang modules. You can also pass extra options to erlang install.
      You can use --expand-bin to create links to any binary found in the
      "<HOME>/.evm/erlang_version/<version>/lib" directory and make them available
      in the <PATH>.
      Extra options will be passed as is to the ./configure step, e.g.:
          evm install 18.3 --with-ssl=/usr/local/ssl --with-docs --expand-bin
        * evm installed
            Lists erlang versions which are built and are ready to be used.
        * evm use [version]
            Switches to the specified erlang version.
        * evm default [version]
            Makes the specified erlang version the default.
        * evm remove [version]
            Removes the specified erlang version completely from the evm space.
        * evm uninstall [version]
            Uninstalls the specified erlang version but keeps it within the
      evm space.
        * evm system
            Alters the PATH in the current shell to use the non-evm erlang.
        * evm version
            Prints the current version of evm.
_EOF

cat $HELP_FILE
rm -f $HELP_FILE
}

# This is supposed to be the main function of this file
# Although all functions are actually exported
# I'm thinking of putting all logic inside this function,
# but maybe this is not a good idea.
function evm() {
  case $1 in
    list)
      evm_list
      ;;

    download)
      evm_download $2
      ;;

    install)
      if [[ $# -le 1 ]]; then
        echo "!!! Must inform a version !!!"
        evm_help
        return 253
      fi

      shift; version=$1; silence="n"; build_docs="n"; expand_bin="n"; extras=""
      shift
      while [[ $# -gt 0 ]];
      do
        case $1 in
          --with-docs)
            build_docs="y"
            shift
            ;;

          --expand-bin)
            expand_bin="y"
            shift
            ;;

          -y|-Y)
            silence="y"
            shift
            ;;

          *)
            extras="$extras $1"
            shift
            ;;
        esac
      done
      evm_install $version $silence $build_docs $expand_bin $extras
      ;;

    remove)
      evm_remove $2
      ;;

    uninstall)
      evm_uninstall $2
      ;;

    system)
      evm_system
      ;;

    use)
      evm_use $2
      ;;

    default)
      evm_default $2
      ;;

    installed)
      evm_installed
      ;;

    cache)
      evm_cache
      ;;

    version)
      echo $VERSION
      ;;

    *)
      evm_help
      ;;

    esac
  }

## Load default version
_load

## Setup autocomplete
if [[ "$EVM_PS_SHELL" == *zsh ]]  || [[  "$(which $SHELL)" == *"/zsh" ]] ; then
  autoload bashcompinit
  bashcompinit
fi

function _evm_complete() {
  # How to do autocomplete bash zsh useful reference  REF: https://blog.deepjyoti30.dev/tab-autocomplet-cli-apps
  local type_list="cache default download help install installed list remove system uninstall use version"
  local cur prev
  local -i i_comp_cword
  # DEBUG
  # DEBUG >&2 echo ""
  # DEBUG >&2 echo "ps:;$(ps | grep $$)"
  # DEBUG >&2 echo "EVM_PS_SHELL:;${EVM_PS_SHELL}"
  # DEBUG >&2 echo "who:;${0}"
  if [[ "$EVM_PS_SHELL" == *bash ]]  || [[  "$(which $SHELL)" == *"/bash" ]] ; then
    # DEBUG >&2 echo "COMP_CWORD:;${COMP_CWORD};"
    i_comp_cword=$COMP_CWORD
    COMPREPLY=()
    # DEBUG >&2 echo "COMP_WORDS:;${COMP_WORDS};"
    cur=${COMP_WORDS[i_comp_cword]}
    prev=${COMP_WORDS[i_comp_cword-1]}
  elif [[ "$EVM_PS_SHELL" == *zsh ]]  || [[  "$(which $SHELL)" == *"/zsh" ]] ; then
    # DEBUG >&2 echo "CURRENT:;${CURRENT};"
    # DEBUG >&2 echo "words:;${words};"
    # DEBUG >&2 echo "curcontext:;${curcontext};"
    i_comp_cword=$(( CURRENT - 1 ))
    # shellcheck disable=SC2154
    cur=${words[i_comp_cword]}
    prev=${words[i_comp_cword-1]}
  fi

  # DEBUG >&2 echo "i_com_cword:;${i_comp_cword};"
  # DEBUG >&2 echo "cur:;${cur};"
  # DEBUG >&2 echo "prev:;${prev};"

  if [[ "$EVM_PS_SHELL" == *bash ]]  || [[  "$(which $SHELL)" == *"/bash" ]] ; then
    # shellcheck disable=SC2086
    if [ ${i_comp_cword} -eq 1 ] ; then
      # DEBUG >&2 echo "bash true 01"
      # shellcheck disable=SC2207
      COMPREPLY=( $(compgen -W "${type_list}" -- $cur) )
    elif [ ${i_comp_cword} -eq 2 ] ; then
      # DEBUG >&2 echo "bash true 12"
      case "$prev" in
        "download"|"install")
          # shellcheck disable=SC2155
          local __erlangs="$(_list_available_erl_versions)"
          # shellcheck disable=SC2207
          COMPREPLY=( $(compgen -W "$__erlangs" -- $cur) )
          ;;
        "uninstall"|"use"|"default")
          # shellcheck disable=SC2155
          # shellcheck disable=SC2010
          # shellcheck disable=SC2012
          local __versions="$(ls --color=never $DEFAULT_INSTALL_LOCATION | sort | perl -e 'print reverse <>' | sed 's/otp_src_//g')"
          # shellcheck disable=SC2207
          COMPREPLY=( $(compgen -W "$__versions" -- $cur) )
          ;;
        "evm")
          # shellcheck disable=SC2155
          # shellcheck disable=SC2010
          # shellcheck disable=SC2012
          _arguments "*: :( $(compgen -W "${type_list}" -- ${cur}) )"
          ;;
        "remove")
          # shellcheck disable=SC2155
          # shellcheck disable=SC2010
          # shellcheck disable=SC2012
          local __versions=$(ls --color=never $DEFAULT_TAR_LOCATION | grep -v $FOLDER_PREFIX | sed "s/$FILE_EXTENSION//g;s/$FILE_PREFIX//g")
          # shellcheck disable=SC2207
          COMPREPLY=( $(compgen -W "$__versions" -- $cur) )
          ;;
        *)
          ;;
      esac
    fi
  elif [[ "$EVM_PS_SHELL" == *zsh ]]  || [[  "$(which $SHELL)" == *"/zsh" ]] ; then
    # shellcheck disable=SC2086
    if [ ${i_comp_cword} -eq 1 ] ; then
      # DEBUG >&2 echo "zsh true 01"
      _arguments "*: :( $(compgen -W "${type_list}" -- ${cur}) )"
    elif [ ${i_comp_cword} -eq 2 ] ; then
      # DEBUG >&2 echo "zsh true 12"
      case "$cur" in
        "download"|"install")
          # shellcheck disable=SC2155
          local __erlangs="$(_list_available_erl_versions)"
          # DEBUG  >&2 echo "_list_available_erl_versions:$(head -1<<<_list_available_erl_versions)"
          _arguments "*: :( $(compgen -W "${__erlangs}" -- ${words}) )"
          ;;
        "uninstall"|"use"|"default")
          # shellcheck disable=SC2155
          # shellcheck disable=SC2010
          # shellcheck disable=SC2012
          local __versions="$(ls --color=never $DEFAULT_INSTALL_LOCATION | sort | perl -e 'print reverse <>' | sed 's/otp_src_//g')"
          _arguments "*: :( $(compgen -W "${__versions}" -- ${words}) )"
          ;;
        "evm")
          # shellcheck disable=SC2155
          # shellcheck disable=SC2010
          # shellcheck disable=SC2012
          _arguments "*: :( $(compgen -W "${type_list}" -- ${words}) )"
          ;;
        "remove")
          # shellcheck disable=SC2155
          # shellcheck disable=SC2010
          # shellcheck disable=SC2012
          local __versions=$(ls --color=never $DEFAULT_TAR_LOCATION | grep -v $FOLDER_PREFIX | sed "s/$FILE_EXTENSION//g;s/$FILE_PREFIX//g")
          _arguments "*: :( $(compgen -W "${__versions}" -- ${words}) )"
          ;;
        *)
          ;;
      esac
    fi
  fi
  return 0
}

# Setup auto complete giving priority to complete command and falling back to compdef if it exists
if command -v complete >/dev/null; then
  complete -F _evm_complete evm
elif command -v compdef >/dev/null; then
  compdef _evm_complete evm
fi
