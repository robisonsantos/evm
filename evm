#!/usr/bin/env bash
# evm4_0.sh
#
# Read the page http://www.erlang.org/download.html and catch
# all available erlang versions to download
#
#  Added support to new versioning of erlang "OTP ..." instead of "R..."
#

VERSION="4.0.1"
ERLANG_ORG="http://www.erlang.org/download.html"
ERLANG_URL="http://www.erlang.org"
FILE_PATH="/download/otp_src_"
FILE_EXTENSION=".tar.gz"
FILE_PREFIX="otp_src_"
EVM_HOME=$HOME"/.evm"
DEFAULT_TAR_LOCATION=$EVM_HOME"/erlang_tars/"
DEFAULT_INSTALL_LOCATION=$EVM_HOME"/erlang_versions/"

function strip_version() {
  if [[ $1 == OTP_* ]]; then
    echo $1 | sed 's/OTP_//'
  else
    echo $1
  fi
}

function list_available_erl_versions() {
  # get the download.html page in a txt format
  # filter for all lines, below the one containing
  # "Available releases", containing what looks like
  # a version string. Trim out whitespace
  # and transform remaining spaces to underscores.
  wget -q -O - "$ERLANG_ORG" | sed '1,/Available releases/'d | grep -E "^\s*(R|OTP\s*R?)[1-9]+" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//;s/ /_/'
}

# TODO: add here some way to discover what's the
#       default version and what's been set to be used and the ones already downloaded
# For now just load the default version
function _load() {
  if [[ -f "$EVM_HOME/evm_config/erlang_default" ]]
  then
    default="$(cat "$EVM_HOME/evm_config/erlang_default")"
    local VER="$(strip_version $default)"
    export PATH="$PATH:$DEFAULT_INSTALL_LOCATION$FILE_PREFIX$VER/bin"
  fi
}

# This function is responsible for listing all
# available erlang versions from erlang.org page
# @params: none
function evm_list() {
  local ERLANGS="$(list_available_erl_versions)"
  echo Available Erlang versions on $ERLANG_URL
  echo

  for erlang in $(echo "$ERLANGS"); do
    echo "$erlang" | cut -d ' ' -f 1
  done
  echo
}


# This function will receive the version name to be
# downloaded. If the version exists in the erlang.org
# it will be stored at $EVM_HOME/erlang_tars. If not, a message is printed
# to user
# @params: erlang_version
function evm_download() {
  local ERLANGS="$(list_available_erl_versions)"

  if [[ -z $(echo "$ERLANGS" | grep -E "$1") ]]
  then
    echo "$1 - This version is not available at $ERLANG_ORG"
  else
    if [[ -f "$DEFAULT_TAR_LOCATION$FILE_PREFIX$1$FILE_EXTENSION" ]]
    then
      echo "$1 - is already present at $DEFAULT_TAR_LOCATION"
    else
      mkdir -p $DEFAULT_TAR_LOCATION
      local VER="$(strip_version $1)"
      wget -P $DEFAULT_TAR_LOCATION $ERLANG_URL$FILE_PATH$VER$FILE_EXTENSION
    fi
  fi
  echo
}


# This function will remove alter the PATH variable, leaving only
# the system version of ERLANG available.
# @params: none
function evm_system() {
  ## Remove any old entries for erlangs managed by evm
  ## from the path variable and add the default one
  ## Here I use sed "s,<pattern>,<replacement>"
  ## To remove any reference of erlang, duplicated ::,
  ## : from the beginning and from the end of path
  for d in $DEFAULT_INSTALL_LOCATION*
  do
    PATH="$(echo $PATH | sed -e "s,$d/bin,,g ; s,^:,, ; s,::,:,g ; s,:$,,")"
  done
  export PATH
}

# This function will download the erlang version if needed,
# then is will "install" that version in the evm space.
# @params: erlang_version
#          continue_install
# TODO: only tries to download if the file is not cached yet
function evm_install() {
  local VER="$(strip_version $1)"
  local DONT_ASK="$2"

  # Download version only if it does not existed cached
  if [[ -f "$DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION" ]]
  then
    echo "$1 is already cached, don't need to download it"
  else
    local ERLANGS="$(list_available_erl_versions)"

    if [[ -z $(echo "$ERLANGS" | grep "$1") ]]
    then
      echo "$1 - This version is not available at $ERLANG_ORG"
      return 1
    else
      mkdir -p $DEFAULT_TAR_LOCATION
      wget -P $DEFAULT_TAR_LOCATION $ERLANG_URL$FILE_PATH$VER$FILE_EXTENSION
    fi
  fi

  # Install the version if not installed yet
  if [[ -d "$DEFAULT_INSTALL_LOCATION/$FILE_PREFIX$VER" ]]
  then
    echo "$1 - This version is already installed at $DEFAULT_INSTALL_LOCATION"
    echo "Try evm 'remove $1' and then 'evm install $1' again"
  else
    mkdir -p $DEFAULT_INSTALL_LOCATION
    echo "Inflating $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION"

    # Handles the special case where otp_src_R15B03-1.tar.gz gets untarred into otp_src_R15B03
    # tar xvzf ~/.evm/erlang_tars/otp_src_R15B03-1.tar.gz --strip-components 1 -C otp_src_R15B03-1
    local UNTAR_DIR=$DEFAULT_TAR_LOCATION$FILE_PREFIX$VER
    mkdir $UNTAR_DIR
    tar -xzf $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION -C $UNTAR_DIR --strip-components 1

    echo "Configuring..."
    cd $UNTAR_DIR
    ./configure --prefix $DEFAULT_INSTALL_LOCATION/$FILE_PREFIX$VER

    # Block execution so the user can check if any dependency is missing
    # before continue with installation unless '-y' is passed along
    # with evm install command
    if [[ "$DONT_ASK" != "-Y" && "$DONT_ASK" != "-y" ]]; then
      echo
      echo "Continue with installation?(y/n)"
      read cont
    else
      cont="y"
    fi

    if [[ $cont != "Y" && $cont != "y" ]]
    then
      echo "Cancelling installation of $1"
      cd ..
      rm -rf $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER
      return 0
    fi

    echo "Compiling and installing $1"
    make && make install 1> "/tmp/erlang_$VER_installation" 2>&1
    rm -rf $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER
    cd -
    echo "Done!"
    echo "Use 'evm default $1' to set this version as default or 'evm use $1' to start using this version right now"
  fi
}

# This function will remove the erlang version from the evm space
# @params: erlang_version
function evm_remove() {
  local VER="$(strip_version $1)"
  if [[ -d $DEFAULT_INSTALL_LOCATION$FILE_PREFIX$VER ]]
  then
    echo "Uninstalling $1..."
    rm -rf $DEFAULT_INSTALL_LOCATION$FILE_PREFIX$VER
    echo "Uninstalled"
  else
    echo "$1 not installed"
  fi

  if [[ -f $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION ]]
  then
    echo "Removing $1..."
    rm -rf $DEFAULT_TAR_LOCATION$FILE_PREFIX$VER$FILE_EXTENSION
    echo "Removed"
  else
    echo "$1 not downloaded"
  fi
}

# This function will actually uninstall the erlang version from
# system, but will leave the erlang tar in the evm space
# @params: erlang_version
function evm_uninstall() {
  local VER="$(strip_version $1)"
  if [[ -d $DEFAULT_INSTALL_LOCATION$FILE_PREFIX$VER ]]
  then
    echo "Uninstalling $1..."
    rm -rf $DEFAULT_INSTALL_LOCATION$FILE_PREFIX$VER
    echo "Uninstalled"
  else
    echo "$1 not installed"
  fi
}

# This function will set this erlang version to be the one
# available in the PATH
# @params: erlang_version
function evm_use() {
  local VER="$(strip_version $1)"
  if [[ -d $DEFAULT_INSTALL_LOCATION$FILE_PREFIX$VER ]]
  then
    ## Remove any old entries for erlangs managed by evm
    ## from the path variable and add the default one
    ## Here I use sed "s,<pattern>,<replacement>"
    ## To remove any reference of erlang, duplicated ::,
    ## : from the beginning and from the end of path
    for d in $DEFAULT_INSTALL_LOCATION*
    do
      PATH="$(echo $PATH | sed -e "s,$d/bin,,g ; s,^:,, ; s,::,:,g ; s,:$,,")"
    done
    export PATH=$DEFAULT_INSTALL_LOCATION$FILE_PREFIX$VER/bin:$PATH
  else
    echo "$1 - Version not installed. Use 'evm install $1' to install it"
  fi
}

# This function will set this erlang version as system default.
# @params: erlang_version
function evm_default() {
  local VER="$(strip_version $1)"
  if [[ -d $DEFAULT_INSTALL_LOCATION$FILE_PREFIX$VER ]]
  then
    echo $1 > $EVM_HOME/evm_config/erlang_default
    evm_use $1
  else
    echo "$1 is not installed yet. Use 'evm install $1' to install it"
  fi
}

# This function will show a list of all installed version of
# in the evm space
function evm_installed() {
  ## Colors
  local LIGHT_GREEN="\e[1;32m"
  local LIGHT_CYAN="\e[1;36m"
  local NO_COLOR="\e[0m"
  local COLOR_SUPPORT="FALSE"

  # Just set a flag in case color is support by this shell
  if tput colors >> /dev/null 2>&1; then
    COLOR_SUPPORT="TRUE"
  fi

  echo "Installed Erlang versions on this system"
  echo

  # Get the default version
  local default_version="$(cat $EVM_HOME/evm_config/erlang_default)"
        default_version="$(strip_version $default_version)"

  local system="$(uname -s)"

  # Get the current versin in use from PATH
  if [ "$system" == "Darwin" ]; then
      local version_in_use="$(echo $PATH | egrep -o "$DEFAULT_INSTALL_LOCATION.*?/bin" | egrep -o "$FILE_PREFIX.*?/" | tr -d '/' | sed "s/$FILE_PREFIX//" | head -1)"
  else
      local version_in_use="$(echo $PATH | grep -Po "$DEFAULT_INSTALL_LOCATION.*?/bin" | grep -Po "$FILE_PREFIX.*?/" | tr -d '/' | sed "s/$FILE_PREFIX//" | head -1)"
  fi

  ## TODO: think of a way to sort versions better
  for f in $(ls $DEFAULT_INSTALL_LOCATION | sort | perl -e 'print reverse <>')
  do
    local ver="${f#$FILE_PREFIX}"

    # Apply symbols and colors
    if [[ "$ver" == "$default_version" && "$ver" == "$version_in_use" ]]; then
      ver="=* $ver"

      if [[ "$COLOR_SUPPORT" == "TRUE" ]]; then
        ver="${LIGHT_GREEN}$ver${NO_COLOR}"
      fi



      if [[ "$COLOR_SUPPORT" == "TRUE" ]]; then
        ver="${LIGHT_CYAN}$ver${NO_COLOR}"
      fi

    elif [[ "$ver" == "$version_in_use" ]]; then
      ver="=> $ver"

      if [[ "$COLOR_SUPPORT" == "TRUE" ]]; then
        ver="${LIGHT_GREEN}$ver${NO_COLOR}"
      fi

    fi

    echo -e "$ver"
  done

  echo
  echo "------"
  echo "=* : current and default"
  echo "=> : current"
  echo " * : default"

  echo
}

# This function will show all erlang version cached on evm space
function evm_cache() {
  echo "Erlang version in cache:"
  echo
  for f in $(ls $DEFAULT_TAR_LOCATION)
  do
       ff=${f#$FILE_PREFIX}
       echo ${ff%$FILE_EXTENSION}
  done
  echo
}

function evm_help() {

    local default_version="$(cat $EVM_HOME/evm_config/erlang_default)"

    local available_versions="$(ls -l ${DEFAULT_INSTALL_LOCATION} \
        | grep '^d' \
        | awk '{print $9}' \
        | cut -d '_' -f 3 \
        | sed 's/^R/\tR/g' \
        | sort \
        | perl -e 'print reverse <>')"

    local HELP_FILE=$EVM_HOME"/.evm_helptext"
    cat > $HELP_FILE <<_EOF

    EVM Home:
        ${EVM_HOME}
    Default Version:
        ${default_version:-"None"}
    Versions Ready To Use:
${available_versions:-"        None"}

    Usage:
        * evm list
            Lists available erlang versions which can be downloaded and installed on the system.
        * evm cache
            Lists available erlang versions which are in the evm space and not necessarily installed.
        * evm download [version]
            Downloads the erlang version.
        * evm install [version] [-y]
            Downloads and installs the specified erlang version.
            Use -y with you want to skip confirmation after configuration step.
            If -y is passed as argument the installation will happen even if dependencies are
            not met. Do not use -y if you want to check dependencies are ok.
        * evm installed
            Lists erlang versions which are built and are ready to be used.
        * evm use [version]
            Begins to use the specified erlang version.
        * evm default [version]
            Makes the specified erlang version as the default erlang version.
        * evm remove [version]
            Removes the erlang version completely from the evm space.
        * evm uninstall [version]
            Uninstalls erlang but keeps the erlang version within the evm.
        * evm system
            Alters the PATH within the shell to use the non-evm erlang.
        * evm version
            Print the currrent version of evm
_EOF

    cat $HELP_FILE
    rm -f $HELP_FILE
}

# This is supposed to be the main function of this file
# Although all functions are actually exported
# I'm thinking of putting all logic inside this function,
# but maybe this is not a good idea.
function evm() {
  case $1 in
    list)
      evm_list
    ;;

    download)
      evm_download $2
    ;;

    install)
      evm_install ${@:2}
    ;;

    remove)
      evm_remove $2
    ;;

    uninstall)
      evm_uninstall $2
    ;;

    system)
      evm_system
    ;;

    use)
      evm_use $2
    ;;

    default)
      evm_default $2
    ;;

    installed)
      evm_installed
    ;;

    cache)
      evm_cache
    ;;

    version)
      echo $VERSION
    ;;

    *)
      evm_help
    ;;

  esac
}

## Load default version
_load
